#!/usr/bin/env python3
"""Simple event device listener"""

import time
import subprocess

from evdev import InputDevice, ecodes

# Device to process
DEVICE = '/dev/input/event1'

# Stream URLs

ONE_URL = 'http://icecast2.play.cz/radiobeat128.mp3'
TWO_URL = 'http://icecast5.play.cz/rockzone128.mp3'
THREE_URL = 'http://ice.abradio.cz:8000/city80128.mp3'
FOUR_URL = 'http://ice.abradio.cz:8000/city90128.mp3'


class KeyboardHandler:
    def main(self):
        device = InputDevice(DEVICE)
        for event in device.read_loop():
            if event.type == ecodes.EV_KEY:
                # 0 - release, 1 - press, 2 - repeat
                if event.value == 0:
                    # key release
                    continue
                code = ecodes.KEY[event.code]
                if hasattr(self, code):
                    getattr(self, code)(event)
                else:
                    print(code)


class SynologyHandler(KeyboardHandler):
    def main(self):
        self.mpc('volume', '50')
        super().main()

    def mpc(self, *args):
        cmd = ['mpc']
        cmd.extend(args)
        print(repr(cmd))
        subprocess.call(cmd)

    def clear(self):
        self.mpc('clear')

    def play(self):
        self.mpc('play')

    def play_stream(self, url):
        self.clear()
        self.mpc('add', url)
        self.play()

    def KEY_KP9(self, event):
        self.play_stream(ONE_URL)

    def KEY_KP0(self, event):
        self.play_stream(TWO_URL)

    def KEY_KPDOT(self, event):
        self.play_stream(THREE_URL)

    def KEY_102ND(self, event):
        self.play_stream(FOUR_URL)

    def KEY_KPPLUS(self, event):
        self.mpc('volume', '+1')

    def KEY_KPMINUS(self, event):
        self.mpc('volume', '-1')

    def KEY_NUMLOCK(self, event):
        self.mpc('stop')

    def KEY_SPACE(self, event):
        self.mpc('toggle')

    def KEY_P(self, event):
        self.mpc('prev')

    def KEY_N(self, event):
        self.mpc('next')

    def KEY_KP1(self, event):
        self.mpc('repeat')

    def KEY_KPENTER(self, event):
        self.mpc('random')

    def KEY_INSERT(self, event):
        # random 100
        self.mpc('random', 'on')
        self.clear()
        self.mpc('load', 'playlist')
        self.play()

    def KEY_LEFT(self, event):
        # playlist
        self.clear()
        self.mpc('load', 'playlist')
        self.play()

    def KEY_DOWN(self, event):
        # radio
        return

    def KEY_UP(self, event):
        # ipod
        return


if __name__ == "__main__":
    SynologyHandler().main()
